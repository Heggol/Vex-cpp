name: Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Conan
        run: pip install conan

      - name: Cache Conan dependencies
        id: cache-conan
        uses: actions/cache@v4
        with:
          path: ${{ matrix.os == 'windows-latest' && 'C:\\Users\\runneradmin\\.conan2' || '~/.conan2' }}
          key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.txt') }}

      - name: Create default Conan profile
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: conan profile detect --force

      - name: Install dependencies
        run: conan install . --output-folder=build --build=missing -s build_type=Release 

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          cmake .. -G "Visual Studio 17 2022" -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" -DCMAKE_BUILD_TYPE="Release"
        shell: bash

      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build
            cmake .. -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" -DCMAKE_BUILD_TYPE="Release"
        shell: bash

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build --config Release --parallel 4

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: make -C build -j4

      - name: Run tests
        run: ctest --test-dir build --output-on-failure --build-config Release
